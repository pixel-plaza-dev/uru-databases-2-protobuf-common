// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/pixel_plaza/shop.proto

package shop

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Shop_AddBusiness_FullMethodName                  = "/pixel_plaza.Shop/AddBusiness"
	Shop_GetBusiness_FullMethodName                  = "/pixel_plaza.Shop/GetBusiness"
	Shop_UpdateBusiness_FullMethodName               = "/pixel_plaza.Shop/UpdateBusiness"
	Shop_SetBusinessProfilePicture_FullMethodName    = "/pixel_plaza.Shop/SetBusinessProfilePicture"
	Shop_SuspendBusiness_FullMethodName              = "/pixel_plaza.Shop/SuspendBusiness"
	Shop_ActivateBusiness_FullMethodName             = "/pixel_plaza.Shop/ActivateBusiness"
	Shop_DeleteBusiness_FullMethodName               = "/pixel_plaza.Shop/DeleteBusiness"
	Shop_AddBusinessOwner_FullMethodName             = "/pixel_plaza.Shop/AddBusinessOwner"
	Shop_RemoveBusinessOwner_FullMethodName          = "/pixel_plaza.Shop/RemoveBusinessOwner"
	Shop_GetBusinessOwners_FullMethodName            = "/pixel_plaza.Shop/GetBusinessOwners"
	Shop_AddBusinessClient_FullMethodName            = "/pixel_plaza.Shop/AddBusinessClient"
	Shop_IsBusinessClient_FullMethodName             = "/pixel_plaza.Shop/IsBusinessClient"
	Shop_AddMarketCategory_FullMethodName            = "/pixel_plaza.Shop/AddMarketCategory"
	Shop_GetMarketCategory_FullMethodName            = "/pixel_plaza.Shop/GetMarketCategory"
	Shop_UpdateMarketCategory_FullMethodName         = "/pixel_plaza.Shop/UpdateMarketCategory"
	Shop_AddBusinessMarketCategory_FullMethodName    = "/pixel_plaza.Shop/AddBusinessMarketCategory"
	Shop_GetBusinessMarketCategories_FullMethodName  = "/pixel_plaza.Shop/GetBusinessMarketCategories"
	Shop_AddStore_FullMethodName                     = "/pixel_plaza.Shop/AddStore"
	Shop_GetStore_FullMethodName                     = "/pixel_plaza.Shop/GetStore"
	Shop_DeleteStore_FullMethodName                  = "/pixel_plaza.Shop/DeleteStore"
	Shop_GetUnoccupiedStores_FullMethodName          = "/pixel_plaza.Shop/GetUnoccupiedStores"
	Shop_AddBranch_FullMethodName                    = "/pixel_plaza.Shop/AddBranch"
	Shop_GetBranch_FullMethodName                    = "/pixel_plaza.Shop/GetBranch"
	Shop_GetBusinessBranches_FullMethodName          = "/pixel_plaza.Shop/GetBusinessBranches"
	Shop_UpdateBranch_FullMethodName                 = "/pixel_plaza.Shop/UpdateBranch"
	Shop_SuspendBranch_FullMethodName                = "/pixel_plaza.Shop/SuspendBranch"
	Shop_ActivateBranch_FullMethodName               = "/pixel_plaza.Shop/ActivateBranch"
	Shop_DeleteBranch_FullMethodName                 = "/pixel_plaza.Shop/DeleteBranch"
	Shop_AddBranchRent_FullMethodName                = "/pixel_plaza.Shop/AddBranchRent"
	Shop_GetBranchRents_FullMethodName               = "/pixel_plaza.Shop/GetBranchRents"
	Shop_UpdateBranchRent_FullMethodName             = "/pixel_plaza.Shop/UpdateBranchRent"
	Shop_GetUnpaidBranchRents_FullMethodName         = "/pixel_plaza.Shop/GetUnpaidBranchRents"
	Shop_GetBusinessUnpaidBranchRents_FullMethodName = "/pixel_plaza.Shop/GetBusinessUnpaidBranchRents"
	Shop_AddProductCategory_FullMethodName           = "/pixel_plaza.Shop/AddProductCategory"
	Shop_GetProductCategory_FullMethodName           = "/pixel_plaza.Shop/GetProductCategory"
	Shop_UpdateProductCategory_FullMethodName        = "/pixel_plaza.Shop/UpdateProductCategory"
	Shop_AddProduct_FullMethodName                   = "/pixel_plaza.Shop/AddProduct"
	Shop_GetProduct_FullMethodName                   = "/pixel_plaza.Shop/GetProduct"
	Shop_UpdateProduct_FullMethodName                = "/pixel_plaza.Shop/UpdateProduct"
	Shop_SearchProducts_FullMethodName               = "/pixel_plaza.Shop/SearchProducts"
	Shop_SuspendProduct_FullMethodName               = "/pixel_plaza.Shop/SuspendProduct"
	Shop_ActivateProduct_FullMethodName              = "/pixel_plaza.Shop/ActivateProduct"
	Shop_AddBusinessProduct_FullMethodName           = "/pixel_plaza.Shop/AddBusinessProduct"
	Shop_GetBusinessProduct_FullMethodName           = "/pixel_plaza.Shop/GetBusinessProduct"
	Shop_UpdateBusinessProduct_FullMethodName        = "/pixel_plaza.Shop/UpdateBusinessProduct"
	Shop_SearchBusinessProducts_FullMethodName       = "/pixel_plaza.Shop/SearchBusinessProducts"
	Shop_SuspendBusinessProduct_FullMethodName       = "/pixel_plaza.Shop/SuspendBusinessProduct"
	Shop_ActivateBusinessProduct_FullMethodName      = "/pixel_plaza.Shop/ActivateBusinessProduct"
	Shop_AddBranchProduct_FullMethodName             = "/pixel_plaza.Shop/AddBranchProduct"
	Shop_GetBranchProduct_FullMethodName             = "/pixel_plaza.Shop/GetBranchProduct"
	Shop_SearchBranchProducts_FullMethodName         = "/pixel_plaza.Shop/SearchBranchProducts"
	Shop_UpdateBranchProduct_FullMethodName          = "/pixel_plaza.Shop/UpdateBranchProduct"
)

// ShopClient is the client API for Shop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopClient interface {
	AddBusiness(ctx context.Context, in *AddBusinessRequest, opts ...grpc.CallOption) (*AddBusinessResponse, error)
	GetBusiness(ctx context.Context, in *GetBusinessRequest, opts ...grpc.CallOption) (*GetBusinessResponse, error)
	UpdateBusiness(ctx context.Context, in *UpdateBusinessRequest, opts ...grpc.CallOption) (*UpdateBusinessResponse, error)
	SetBusinessProfilePicture(ctx context.Context, in *SetBusinessProfilePictureRequest, opts ...grpc.CallOption) (*SetBusinessProfilePictureResponse, error)
	SuspendBusiness(ctx context.Context, in *SuspendBusinessRequest, opts ...grpc.CallOption) (*SuspendBusinessResponse, error)
	ActivateBusiness(ctx context.Context, in *ActivateBusinessRequest, opts ...grpc.CallOption) (*ActivateBusinessResponse, error)
	DeleteBusiness(ctx context.Context, in *DeleteBusinessRequest, opts ...grpc.CallOption) (*DeleteBusinessResponse, error)
	AddBusinessOwner(ctx context.Context, in *AddBusinessOwnerRequest, opts ...grpc.CallOption) (*AddBusinessOwnerResponse, error)
	RemoveBusinessOwner(ctx context.Context, in *RemoveBusinessOwnerRequest, opts ...grpc.CallOption) (*RemoveBusinessOwnerResponse, error)
	GetBusinessOwners(ctx context.Context, in *GetBusinessOwnersRequest, opts ...grpc.CallOption) (*GetBusinessOwnersResponse, error)
	AddBusinessClient(ctx context.Context, in *AddBusinessClientRequest, opts ...grpc.CallOption) (*AddBusinessClientResponse, error)
	IsBusinessClient(ctx context.Context, in *IsBusinessClientRequest, opts ...grpc.CallOption) (*IsBusinessClientResponse, error)
	AddMarketCategory(ctx context.Context, in *AddMarketCategoryRequest, opts ...grpc.CallOption) (*AddMarketCategoryResponse, error)
	GetMarketCategory(ctx context.Context, in *GetMarketCategoryRequest, opts ...grpc.CallOption) (*GetMarketCategoryResponse, error)
	UpdateMarketCategory(ctx context.Context, in *UpdateMarketCategoryRequest, opts ...grpc.CallOption) (*UpdateMarketCategoryResponse, error)
	AddBusinessMarketCategory(ctx context.Context, in *AddBusinessMarketCategoryRequest, opts ...grpc.CallOption) (*AddBusinessMarketCategoryResponse, error)
	GetBusinessMarketCategories(ctx context.Context, in *GetBusinessMarketCategoriesRequest, opts ...grpc.CallOption) (*GetBusinessMarketCategoriesResponse, error)
	AddStore(ctx context.Context, in *AddStoreRequest, opts ...grpc.CallOption) (*AddStoreResponse, error)
	GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*GetStoreResponse, error)
	DeleteStore(ctx context.Context, in *DeleteStoreRequest, opts ...grpc.CallOption) (*DeleteStoreResponse, error)
	GetUnoccupiedStores(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUnoccupiedStoresResponse, error)
	AddBranch(ctx context.Context, in *AddBranchRequest, opts ...grpc.CallOption) (*AddBranchResponse, error)
	GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*GetBranchResponse, error)
	GetBusinessBranches(ctx context.Context, in *GetBusinessBranchesRequest, opts ...grpc.CallOption) (*GetBusinessBranchesResponse, error)
	UpdateBranch(ctx context.Context, in *UpdateBranchRequest, opts ...grpc.CallOption) (*UpdateBranchResponse, error)
	SuspendBranch(ctx context.Context, in *SuspendBranchRequest, opts ...grpc.CallOption) (*SuspendBranchResponse, error)
	ActivateBranch(ctx context.Context, in *ActivateBranchRequest, opts ...grpc.CallOption) (*ActivateBranchResponse, error)
	DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchResponse, error)
	AddBranchRent(ctx context.Context, in *AddBranchRentRequest, opts ...grpc.CallOption) (*AddBranchRentResponse, error)
	GetBranchRents(ctx context.Context, in *GetBranchRentsRequest, opts ...grpc.CallOption) (*GetBranchRentsResponse, error)
	UpdateBranchRent(ctx context.Context, in *UpdateBranchRentRequest, opts ...grpc.CallOption) (*UpdateBranchRentResponse, error)
	GetUnpaidBranchRents(ctx context.Context, in *GetUnpaidBranchRentsRequest, opts ...grpc.CallOption) (*GetUnpaidBranchRentsResponse, error)
	GetBusinessUnpaidBranchRents(ctx context.Context, in *GetBusinessUnpaidBranchRentsRequest, opts ...grpc.CallOption) (*GetBusinessUnpaidBranchRentsResponse, error)
	AddProductCategory(ctx context.Context, in *AddProductCategoryRequest, opts ...grpc.CallOption) (*AddProductCategoryResponse, error)
	GetProductCategory(ctx context.Context, in *GetProductCategoryRequest, opts ...grpc.CallOption) (*GetProductCategoryResponse, error)
	UpdateProductCategory(ctx context.Context, in *UpdateProductCategoryRequest, opts ...grpc.CallOption) (*UpdateProductCategoryResponse, error)
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
	SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...grpc.CallOption) (*SearchProductsResponse, error)
	SuspendProduct(ctx context.Context, in *SuspendProductRequest, opts ...grpc.CallOption) (*SuspendProductResponse, error)
	ActivateProduct(ctx context.Context, in *ActivateProductRequest, opts ...grpc.CallOption) (*ActivateProductResponse, error)
	AddBusinessProduct(ctx context.Context, in *AddBusinessProductRequest, opts ...grpc.CallOption) (*AddBusinessProductResponse, error)
	GetBusinessProduct(ctx context.Context, in *GetBusinessProductRequest, opts ...grpc.CallOption) (*GetBusinessProductResponse, error)
	UpdateBusinessProduct(ctx context.Context, in *UpdateBusinessProductRequest, opts ...grpc.CallOption) (*UpdateBusinessProductResponse, error)
	SearchBusinessProducts(ctx context.Context, in *SearchBusinessProductsRequest, opts ...grpc.CallOption) (*SearchBusinessProductsResponse, error)
	SuspendBusinessProduct(ctx context.Context, in *SuspendBusinessProductRequest, opts ...grpc.CallOption) (*SuspendBusinessProductResponse, error)
	ActivateBusinessProduct(ctx context.Context, in *ActivateBusinessProductRequest, opts ...grpc.CallOption) (*ActivateBusinessProductResponse, error)
	AddBranchProduct(ctx context.Context, in *AddBranchProductRequest, opts ...grpc.CallOption) (*AddBranchProductResponse, error)
	GetBranchProduct(ctx context.Context, in *GetBranchProductRequest, opts ...grpc.CallOption) (*GetBranchProductResponse, error)
	SearchBranchProducts(ctx context.Context, in *SearchBranchProductsRequest, opts ...grpc.CallOption) (*SearchBranchProductsResponse, error)
	UpdateBranchProduct(ctx context.Context, in *UpdateBranchProductRequest, opts ...grpc.CallOption) (*UpdateBranchProductResponse, error)
}

type shopClient struct {
	cc grpc.ClientConnInterface
}

func NewShopClient(cc grpc.ClientConnInterface) ShopClient {
	return &shopClient{cc}
}

func (c *shopClient) AddBusiness(ctx context.Context, in *AddBusinessRequest, opts ...grpc.CallOption) (*AddBusinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBusinessResponse)
	err := c.cc.Invoke(ctx, Shop_AddBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetBusiness(ctx context.Context, in *GetBusinessRequest, opts ...grpc.CallOption) (*GetBusinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBusinessResponse)
	err := c.cc.Invoke(ctx, Shop_GetBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) UpdateBusiness(ctx context.Context, in *UpdateBusinessRequest, opts ...grpc.CallOption) (*UpdateBusinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBusinessResponse)
	err := c.cc.Invoke(ctx, Shop_UpdateBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) SetBusinessProfilePicture(ctx context.Context, in *SetBusinessProfilePictureRequest, opts ...grpc.CallOption) (*SetBusinessProfilePictureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetBusinessProfilePictureResponse)
	err := c.cc.Invoke(ctx, Shop_SetBusinessProfilePicture_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) SuspendBusiness(ctx context.Context, in *SuspendBusinessRequest, opts ...grpc.CallOption) (*SuspendBusinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuspendBusinessResponse)
	err := c.cc.Invoke(ctx, Shop_SuspendBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) ActivateBusiness(ctx context.Context, in *ActivateBusinessRequest, opts ...grpc.CallOption) (*ActivateBusinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivateBusinessResponse)
	err := c.cc.Invoke(ctx, Shop_ActivateBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) DeleteBusiness(ctx context.Context, in *DeleteBusinessRequest, opts ...grpc.CallOption) (*DeleteBusinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBusinessResponse)
	err := c.cc.Invoke(ctx, Shop_DeleteBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) AddBusinessOwner(ctx context.Context, in *AddBusinessOwnerRequest, opts ...grpc.CallOption) (*AddBusinessOwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBusinessOwnerResponse)
	err := c.cc.Invoke(ctx, Shop_AddBusinessOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) RemoveBusinessOwner(ctx context.Context, in *RemoveBusinessOwnerRequest, opts ...grpc.CallOption) (*RemoveBusinessOwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveBusinessOwnerResponse)
	err := c.cc.Invoke(ctx, Shop_RemoveBusinessOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetBusinessOwners(ctx context.Context, in *GetBusinessOwnersRequest, opts ...grpc.CallOption) (*GetBusinessOwnersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBusinessOwnersResponse)
	err := c.cc.Invoke(ctx, Shop_GetBusinessOwners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) AddBusinessClient(ctx context.Context, in *AddBusinessClientRequest, opts ...grpc.CallOption) (*AddBusinessClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBusinessClientResponse)
	err := c.cc.Invoke(ctx, Shop_AddBusinessClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) IsBusinessClient(ctx context.Context, in *IsBusinessClientRequest, opts ...grpc.CallOption) (*IsBusinessClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsBusinessClientResponse)
	err := c.cc.Invoke(ctx, Shop_IsBusinessClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) AddMarketCategory(ctx context.Context, in *AddMarketCategoryRequest, opts ...grpc.CallOption) (*AddMarketCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMarketCategoryResponse)
	err := c.cc.Invoke(ctx, Shop_AddMarketCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetMarketCategory(ctx context.Context, in *GetMarketCategoryRequest, opts ...grpc.CallOption) (*GetMarketCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMarketCategoryResponse)
	err := c.cc.Invoke(ctx, Shop_GetMarketCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) UpdateMarketCategory(ctx context.Context, in *UpdateMarketCategoryRequest, opts ...grpc.CallOption) (*UpdateMarketCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMarketCategoryResponse)
	err := c.cc.Invoke(ctx, Shop_UpdateMarketCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) AddBusinessMarketCategory(ctx context.Context, in *AddBusinessMarketCategoryRequest, opts ...grpc.CallOption) (*AddBusinessMarketCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBusinessMarketCategoryResponse)
	err := c.cc.Invoke(ctx, Shop_AddBusinessMarketCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetBusinessMarketCategories(ctx context.Context, in *GetBusinessMarketCategoriesRequest, opts ...grpc.CallOption) (*GetBusinessMarketCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBusinessMarketCategoriesResponse)
	err := c.cc.Invoke(ctx, Shop_GetBusinessMarketCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) AddStore(ctx context.Context, in *AddStoreRequest, opts ...grpc.CallOption) (*AddStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStoreResponse)
	err := c.cc.Invoke(ctx, Shop_AddStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*GetStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoreResponse)
	err := c.cc.Invoke(ctx, Shop_GetStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) DeleteStore(ctx context.Context, in *DeleteStoreRequest, opts ...grpc.CallOption) (*DeleteStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStoreResponse)
	err := c.cc.Invoke(ctx, Shop_DeleteStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetUnoccupiedStores(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUnoccupiedStoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnoccupiedStoresResponse)
	err := c.cc.Invoke(ctx, Shop_GetUnoccupiedStores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) AddBranch(ctx context.Context, in *AddBranchRequest, opts ...grpc.CallOption) (*AddBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBranchResponse)
	err := c.cc.Invoke(ctx, Shop_AddBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*GetBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBranchResponse)
	err := c.cc.Invoke(ctx, Shop_GetBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetBusinessBranches(ctx context.Context, in *GetBusinessBranchesRequest, opts ...grpc.CallOption) (*GetBusinessBranchesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBusinessBranchesResponse)
	err := c.cc.Invoke(ctx, Shop_GetBusinessBranches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) UpdateBranch(ctx context.Context, in *UpdateBranchRequest, opts ...grpc.CallOption) (*UpdateBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBranchResponse)
	err := c.cc.Invoke(ctx, Shop_UpdateBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) SuspendBranch(ctx context.Context, in *SuspendBranchRequest, opts ...grpc.CallOption) (*SuspendBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuspendBranchResponse)
	err := c.cc.Invoke(ctx, Shop_SuspendBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) ActivateBranch(ctx context.Context, in *ActivateBranchRequest, opts ...grpc.CallOption) (*ActivateBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivateBranchResponse)
	err := c.cc.Invoke(ctx, Shop_ActivateBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBranchResponse)
	err := c.cc.Invoke(ctx, Shop_DeleteBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) AddBranchRent(ctx context.Context, in *AddBranchRentRequest, opts ...grpc.CallOption) (*AddBranchRentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBranchRentResponse)
	err := c.cc.Invoke(ctx, Shop_AddBranchRent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetBranchRents(ctx context.Context, in *GetBranchRentsRequest, opts ...grpc.CallOption) (*GetBranchRentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBranchRentsResponse)
	err := c.cc.Invoke(ctx, Shop_GetBranchRents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) UpdateBranchRent(ctx context.Context, in *UpdateBranchRentRequest, opts ...grpc.CallOption) (*UpdateBranchRentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBranchRentResponse)
	err := c.cc.Invoke(ctx, Shop_UpdateBranchRent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetUnpaidBranchRents(ctx context.Context, in *GetUnpaidBranchRentsRequest, opts ...grpc.CallOption) (*GetUnpaidBranchRentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnpaidBranchRentsResponse)
	err := c.cc.Invoke(ctx, Shop_GetUnpaidBranchRents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetBusinessUnpaidBranchRents(ctx context.Context, in *GetBusinessUnpaidBranchRentsRequest, opts ...grpc.CallOption) (*GetBusinessUnpaidBranchRentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBusinessUnpaidBranchRentsResponse)
	err := c.cc.Invoke(ctx, Shop_GetBusinessUnpaidBranchRents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) AddProductCategory(ctx context.Context, in *AddProductCategoryRequest, opts ...grpc.CallOption) (*AddProductCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductCategoryResponse)
	err := c.cc.Invoke(ctx, Shop_AddProductCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetProductCategory(ctx context.Context, in *GetProductCategoryRequest, opts ...grpc.CallOption) (*GetProductCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductCategoryResponse)
	err := c.cc.Invoke(ctx, Shop_GetProductCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) UpdateProductCategory(ctx context.Context, in *UpdateProductCategoryRequest, opts ...grpc.CallOption) (*UpdateProductCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductCategoryResponse)
	err := c.cc.Invoke(ctx, Shop_UpdateProductCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductResponse)
	err := c.cc.Invoke(ctx, Shop_AddProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductResponse)
	err := c.cc.Invoke(ctx, Shop_GetProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductResponse)
	err := c.cc.Invoke(ctx, Shop_UpdateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...grpc.CallOption) (*SearchProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchProductsResponse)
	err := c.cc.Invoke(ctx, Shop_SearchProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) SuspendProduct(ctx context.Context, in *SuspendProductRequest, opts ...grpc.CallOption) (*SuspendProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuspendProductResponse)
	err := c.cc.Invoke(ctx, Shop_SuspendProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) ActivateProduct(ctx context.Context, in *ActivateProductRequest, opts ...grpc.CallOption) (*ActivateProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivateProductResponse)
	err := c.cc.Invoke(ctx, Shop_ActivateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) AddBusinessProduct(ctx context.Context, in *AddBusinessProductRequest, opts ...grpc.CallOption) (*AddBusinessProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBusinessProductResponse)
	err := c.cc.Invoke(ctx, Shop_AddBusinessProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetBusinessProduct(ctx context.Context, in *GetBusinessProductRequest, opts ...grpc.CallOption) (*GetBusinessProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBusinessProductResponse)
	err := c.cc.Invoke(ctx, Shop_GetBusinessProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) UpdateBusinessProduct(ctx context.Context, in *UpdateBusinessProductRequest, opts ...grpc.CallOption) (*UpdateBusinessProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBusinessProductResponse)
	err := c.cc.Invoke(ctx, Shop_UpdateBusinessProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) SearchBusinessProducts(ctx context.Context, in *SearchBusinessProductsRequest, opts ...grpc.CallOption) (*SearchBusinessProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchBusinessProductsResponse)
	err := c.cc.Invoke(ctx, Shop_SearchBusinessProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) SuspendBusinessProduct(ctx context.Context, in *SuspendBusinessProductRequest, opts ...grpc.CallOption) (*SuspendBusinessProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuspendBusinessProductResponse)
	err := c.cc.Invoke(ctx, Shop_SuspendBusinessProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) ActivateBusinessProduct(ctx context.Context, in *ActivateBusinessProductRequest, opts ...grpc.CallOption) (*ActivateBusinessProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivateBusinessProductResponse)
	err := c.cc.Invoke(ctx, Shop_ActivateBusinessProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) AddBranchProduct(ctx context.Context, in *AddBranchProductRequest, opts ...grpc.CallOption) (*AddBranchProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBranchProductResponse)
	err := c.cc.Invoke(ctx, Shop_AddBranchProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetBranchProduct(ctx context.Context, in *GetBranchProductRequest, opts ...grpc.CallOption) (*GetBranchProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBranchProductResponse)
	err := c.cc.Invoke(ctx, Shop_GetBranchProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) SearchBranchProducts(ctx context.Context, in *SearchBranchProductsRequest, opts ...grpc.CallOption) (*SearchBranchProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchBranchProductsResponse)
	err := c.cc.Invoke(ctx, Shop_SearchBranchProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) UpdateBranchProduct(ctx context.Context, in *UpdateBranchProductRequest, opts ...grpc.CallOption) (*UpdateBranchProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBranchProductResponse)
	err := c.cc.Invoke(ctx, Shop_UpdateBranchProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopServer is the server API for Shop service.
// All implementations must embed UnimplementedShopServer
// for forward compatibility.
type ShopServer interface {
	AddBusiness(context.Context, *AddBusinessRequest) (*AddBusinessResponse, error)
	GetBusiness(context.Context, *GetBusinessRequest) (*GetBusinessResponse, error)
	UpdateBusiness(context.Context, *UpdateBusinessRequest) (*UpdateBusinessResponse, error)
	SetBusinessProfilePicture(context.Context, *SetBusinessProfilePictureRequest) (*SetBusinessProfilePictureResponse, error)
	SuspendBusiness(context.Context, *SuspendBusinessRequest) (*SuspendBusinessResponse, error)
	ActivateBusiness(context.Context, *ActivateBusinessRequest) (*ActivateBusinessResponse, error)
	DeleteBusiness(context.Context, *DeleteBusinessRequest) (*DeleteBusinessResponse, error)
	AddBusinessOwner(context.Context, *AddBusinessOwnerRequest) (*AddBusinessOwnerResponse, error)
	RemoveBusinessOwner(context.Context, *RemoveBusinessOwnerRequest) (*RemoveBusinessOwnerResponse, error)
	GetBusinessOwners(context.Context, *GetBusinessOwnersRequest) (*GetBusinessOwnersResponse, error)
	AddBusinessClient(context.Context, *AddBusinessClientRequest) (*AddBusinessClientResponse, error)
	IsBusinessClient(context.Context, *IsBusinessClientRequest) (*IsBusinessClientResponse, error)
	AddMarketCategory(context.Context, *AddMarketCategoryRequest) (*AddMarketCategoryResponse, error)
	GetMarketCategory(context.Context, *GetMarketCategoryRequest) (*GetMarketCategoryResponse, error)
	UpdateMarketCategory(context.Context, *UpdateMarketCategoryRequest) (*UpdateMarketCategoryResponse, error)
	AddBusinessMarketCategory(context.Context, *AddBusinessMarketCategoryRequest) (*AddBusinessMarketCategoryResponse, error)
	GetBusinessMarketCategories(context.Context, *GetBusinessMarketCategoriesRequest) (*GetBusinessMarketCategoriesResponse, error)
	AddStore(context.Context, *AddStoreRequest) (*AddStoreResponse, error)
	GetStore(context.Context, *GetStoreRequest) (*GetStoreResponse, error)
	DeleteStore(context.Context, *DeleteStoreRequest) (*DeleteStoreResponse, error)
	GetUnoccupiedStores(context.Context, *emptypb.Empty) (*GetUnoccupiedStoresResponse, error)
	AddBranch(context.Context, *AddBranchRequest) (*AddBranchResponse, error)
	GetBranch(context.Context, *GetBranchRequest) (*GetBranchResponse, error)
	GetBusinessBranches(context.Context, *GetBusinessBranchesRequest) (*GetBusinessBranchesResponse, error)
	UpdateBranch(context.Context, *UpdateBranchRequest) (*UpdateBranchResponse, error)
	SuspendBranch(context.Context, *SuspendBranchRequest) (*SuspendBranchResponse, error)
	ActivateBranch(context.Context, *ActivateBranchRequest) (*ActivateBranchResponse, error)
	DeleteBranch(context.Context, *DeleteBranchRequest) (*DeleteBranchResponse, error)
	AddBranchRent(context.Context, *AddBranchRentRequest) (*AddBranchRentResponse, error)
	GetBranchRents(context.Context, *GetBranchRentsRequest) (*GetBranchRentsResponse, error)
	UpdateBranchRent(context.Context, *UpdateBranchRentRequest) (*UpdateBranchRentResponse, error)
	GetUnpaidBranchRents(context.Context, *GetUnpaidBranchRentsRequest) (*GetUnpaidBranchRentsResponse, error)
	GetBusinessUnpaidBranchRents(context.Context, *GetBusinessUnpaidBranchRentsRequest) (*GetBusinessUnpaidBranchRentsResponse, error)
	AddProductCategory(context.Context, *AddProductCategoryRequest) (*AddProductCategoryResponse, error)
	GetProductCategory(context.Context, *GetProductCategoryRequest) (*GetProductCategoryResponse, error)
	UpdateProductCategory(context.Context, *UpdateProductCategoryRequest) (*UpdateProductCategoryResponse, error)
	AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error)
	GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error)
	SearchProducts(context.Context, *SearchProductsRequest) (*SearchProductsResponse, error)
	SuspendProduct(context.Context, *SuspendProductRequest) (*SuspendProductResponse, error)
	ActivateProduct(context.Context, *ActivateProductRequest) (*ActivateProductResponse, error)
	AddBusinessProduct(context.Context, *AddBusinessProductRequest) (*AddBusinessProductResponse, error)
	GetBusinessProduct(context.Context, *GetBusinessProductRequest) (*GetBusinessProductResponse, error)
	UpdateBusinessProduct(context.Context, *UpdateBusinessProductRequest) (*UpdateBusinessProductResponse, error)
	SearchBusinessProducts(context.Context, *SearchBusinessProductsRequest) (*SearchBusinessProductsResponse, error)
	SuspendBusinessProduct(context.Context, *SuspendBusinessProductRequest) (*SuspendBusinessProductResponse, error)
	ActivateBusinessProduct(context.Context, *ActivateBusinessProductRequest) (*ActivateBusinessProductResponse, error)
	AddBranchProduct(context.Context, *AddBranchProductRequest) (*AddBranchProductResponse, error)
	GetBranchProduct(context.Context, *GetBranchProductRequest) (*GetBranchProductResponse, error)
	SearchBranchProducts(context.Context, *SearchBranchProductsRequest) (*SearchBranchProductsResponse, error)
	UpdateBranchProduct(context.Context, *UpdateBranchProductRequest) (*UpdateBranchProductResponse, error)
	mustEmbedUnimplementedShopServer()
}

// UnimplementedShopServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShopServer struct{}

func (UnimplementedShopServer) AddBusiness(context.Context, *AddBusinessRequest) (*AddBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusiness not implemented")
}
func (UnimplementedShopServer) GetBusiness(context.Context, *GetBusinessRequest) (*GetBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusiness not implemented")
}
func (UnimplementedShopServer) UpdateBusiness(context.Context, *UpdateBusinessRequest) (*UpdateBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusiness not implemented")
}
func (UnimplementedShopServer) SetBusinessProfilePicture(context.Context, *SetBusinessProfilePictureRequest) (*SetBusinessProfilePictureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBusinessProfilePicture not implemented")
}
func (UnimplementedShopServer) SuspendBusiness(context.Context, *SuspendBusinessRequest) (*SuspendBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendBusiness not implemented")
}
func (UnimplementedShopServer) ActivateBusiness(context.Context, *ActivateBusinessRequest) (*ActivateBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateBusiness not implemented")
}
func (UnimplementedShopServer) DeleteBusiness(context.Context, *DeleteBusinessRequest) (*DeleteBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusiness not implemented")
}
func (UnimplementedShopServer) AddBusinessOwner(context.Context, *AddBusinessOwnerRequest) (*AddBusinessOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusinessOwner not implemented")
}
func (UnimplementedShopServer) RemoveBusinessOwner(context.Context, *RemoveBusinessOwnerRequest) (*RemoveBusinessOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBusinessOwner not implemented")
}
func (UnimplementedShopServer) GetBusinessOwners(context.Context, *GetBusinessOwnersRequest) (*GetBusinessOwnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessOwners not implemented")
}
func (UnimplementedShopServer) AddBusinessClient(context.Context, *AddBusinessClientRequest) (*AddBusinessClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusinessClient not implemented")
}
func (UnimplementedShopServer) IsBusinessClient(context.Context, *IsBusinessClientRequest) (*IsBusinessClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBusinessClient not implemented")
}
func (UnimplementedShopServer) AddMarketCategory(context.Context, *AddMarketCategoryRequest) (*AddMarketCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMarketCategory not implemented")
}
func (UnimplementedShopServer) GetMarketCategory(context.Context, *GetMarketCategoryRequest) (*GetMarketCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketCategory not implemented")
}
func (UnimplementedShopServer) UpdateMarketCategory(context.Context, *UpdateMarketCategoryRequest) (*UpdateMarketCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMarketCategory not implemented")
}
func (UnimplementedShopServer) AddBusinessMarketCategory(context.Context, *AddBusinessMarketCategoryRequest) (*AddBusinessMarketCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusinessMarketCategory not implemented")
}
func (UnimplementedShopServer) GetBusinessMarketCategories(context.Context, *GetBusinessMarketCategoriesRequest) (*GetBusinessMarketCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessMarketCategories not implemented")
}
func (UnimplementedShopServer) AddStore(context.Context, *AddStoreRequest) (*AddStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStore not implemented")
}
func (UnimplementedShopServer) GetStore(context.Context, *GetStoreRequest) (*GetStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStore not implemented")
}
func (UnimplementedShopServer) DeleteStore(context.Context, *DeleteStoreRequest) (*DeleteStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStore not implemented")
}
func (UnimplementedShopServer) GetUnoccupiedStores(context.Context, *emptypb.Empty) (*GetUnoccupiedStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnoccupiedStores not implemented")
}
func (UnimplementedShopServer) AddBranch(context.Context, *AddBranchRequest) (*AddBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBranch not implemented")
}
func (UnimplementedShopServer) GetBranch(context.Context, *GetBranchRequest) (*GetBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranch not implemented")
}
func (UnimplementedShopServer) GetBusinessBranches(context.Context, *GetBusinessBranchesRequest) (*GetBusinessBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessBranches not implemented")
}
func (UnimplementedShopServer) UpdateBranch(context.Context, *UpdateBranchRequest) (*UpdateBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranch not implemented")
}
func (UnimplementedShopServer) SuspendBranch(context.Context, *SuspendBranchRequest) (*SuspendBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendBranch not implemented")
}
func (UnimplementedShopServer) ActivateBranch(context.Context, *ActivateBranchRequest) (*ActivateBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateBranch not implemented")
}
func (UnimplementedShopServer) DeleteBranch(context.Context, *DeleteBranchRequest) (*DeleteBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBranch not implemented")
}
func (UnimplementedShopServer) AddBranchRent(context.Context, *AddBranchRentRequest) (*AddBranchRentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBranchRent not implemented")
}
func (UnimplementedShopServer) GetBranchRents(context.Context, *GetBranchRentsRequest) (*GetBranchRentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchRents not implemented")
}
func (UnimplementedShopServer) UpdateBranchRent(context.Context, *UpdateBranchRentRequest) (*UpdateBranchRentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranchRent not implemented")
}
func (UnimplementedShopServer) GetUnpaidBranchRents(context.Context, *GetUnpaidBranchRentsRequest) (*GetUnpaidBranchRentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnpaidBranchRents not implemented")
}
func (UnimplementedShopServer) GetBusinessUnpaidBranchRents(context.Context, *GetBusinessUnpaidBranchRentsRequest) (*GetBusinessUnpaidBranchRentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnpaidBranchRents not implemented")
}
func (UnimplementedShopServer) AddProductCategory(context.Context, *AddProductCategoryRequest) (*AddProductCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductCategory not implemented")
}
func (UnimplementedShopServer) GetProductCategory(context.Context, *GetProductCategoryRequest) (*GetProductCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCategory not implemented")
}
func (UnimplementedShopServer) UpdateProductCategory(context.Context, *UpdateProductCategoryRequest) (*UpdateProductCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductCategory not implemented")
}
func (UnimplementedShopServer) AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedShopServer) GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedShopServer) UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedShopServer) SearchProducts(context.Context, *SearchProductsRequest) (*SearchProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProducts not implemented")
}
func (UnimplementedShopServer) SuspendProduct(context.Context, *SuspendProductRequest) (*SuspendProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendProduct not implemented")
}
func (UnimplementedShopServer) ActivateProduct(context.Context, *ActivateProductRequest) (*ActivateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateProduct not implemented")
}
func (UnimplementedShopServer) AddBusinessProduct(context.Context, *AddBusinessProductRequest) (*AddBusinessProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusinessProduct not implemented")
}
func (UnimplementedShopServer) GetBusinessProduct(context.Context, *GetBusinessProductRequest) (*GetBusinessProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessProduct not implemented")
}
func (UnimplementedShopServer) UpdateBusinessProduct(context.Context, *UpdateBusinessProductRequest) (*UpdateBusinessProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessProduct not implemented")
}
func (UnimplementedShopServer) SearchBusinessProducts(context.Context, *SearchBusinessProductsRequest) (*SearchBusinessProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBusinessProducts not implemented")
}
func (UnimplementedShopServer) SuspendBusinessProduct(context.Context, *SuspendBusinessProductRequest) (*SuspendBusinessProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendBusinessProduct not implemented")
}
func (UnimplementedShopServer) ActivateBusinessProduct(context.Context, *ActivateBusinessProductRequest) (*ActivateBusinessProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateBusinessProduct not implemented")
}
func (UnimplementedShopServer) AddBranchProduct(context.Context, *AddBranchProductRequest) (*AddBranchProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBranchProduct not implemented")
}
func (UnimplementedShopServer) GetBranchProduct(context.Context, *GetBranchProductRequest) (*GetBranchProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchProduct not implemented")
}
func (UnimplementedShopServer) SearchBranchProducts(context.Context, *SearchBranchProductsRequest) (*SearchBranchProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBranchProducts not implemented")
}
func (UnimplementedShopServer) UpdateBranchProduct(context.Context, *UpdateBranchProductRequest) (*UpdateBranchProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranchProduct not implemented")
}
func (UnimplementedShopServer) mustEmbedUnimplementedShopServer() {}
func (UnimplementedShopServer) testEmbeddedByValue()              {}

// UnsafeShopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopServer will
// result in compilation errors.
type UnsafeShopServer interface {
	mustEmbedUnimplementedShopServer()
}

func RegisterShopServer(s grpc.ServiceRegistrar, srv ShopServer) {
	// If the following call pancis, it indicates UnimplementedShopServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Shop_ServiceDesc, srv)
}

func _Shop_AddBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).AddBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_AddBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).AddBusiness(ctx, req.(*AddBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_GetBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetBusiness(ctx, req.(*GetBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_UpdateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).UpdateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_UpdateBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).UpdateBusiness(ctx, req.(*UpdateBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_SetBusinessProfilePicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBusinessProfilePictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).SetBusinessProfilePicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_SetBusinessProfilePicture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).SetBusinessProfilePicture(ctx, req.(*SetBusinessProfilePictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_SuspendBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).SuspendBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_SuspendBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).SuspendBusiness(ctx, req.(*SuspendBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_ActivateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).ActivateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_ActivateBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).ActivateBusiness(ctx, req.(*ActivateBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_DeleteBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).DeleteBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_DeleteBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).DeleteBusiness(ctx, req.(*DeleteBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_AddBusinessOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).AddBusinessOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_AddBusinessOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).AddBusinessOwner(ctx, req.(*AddBusinessOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_RemoveBusinessOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBusinessOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).RemoveBusinessOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_RemoveBusinessOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).RemoveBusinessOwner(ctx, req.(*RemoveBusinessOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetBusinessOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessOwnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetBusinessOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_GetBusinessOwners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetBusinessOwners(ctx, req.(*GetBusinessOwnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_AddBusinessClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).AddBusinessClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_AddBusinessClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).AddBusinessClient(ctx, req.(*AddBusinessClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_IsBusinessClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsBusinessClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).IsBusinessClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_IsBusinessClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).IsBusinessClient(ctx, req.(*IsBusinessClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_AddMarketCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMarketCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).AddMarketCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_AddMarketCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).AddMarketCategory(ctx, req.(*AddMarketCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetMarketCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetMarketCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_GetMarketCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetMarketCategory(ctx, req.(*GetMarketCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_UpdateMarketCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMarketCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).UpdateMarketCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_UpdateMarketCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).UpdateMarketCategory(ctx, req.(*UpdateMarketCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_AddBusinessMarketCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessMarketCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).AddBusinessMarketCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_AddBusinessMarketCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).AddBusinessMarketCategory(ctx, req.(*AddBusinessMarketCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetBusinessMarketCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessMarketCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetBusinessMarketCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_GetBusinessMarketCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetBusinessMarketCategories(ctx, req.(*GetBusinessMarketCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_AddStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).AddStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_AddStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).AddStore(ctx, req.(*AddStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_GetStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetStore(ctx, req.(*GetStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_DeleteStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).DeleteStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_DeleteStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).DeleteStore(ctx, req.(*DeleteStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetUnoccupiedStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetUnoccupiedStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_GetUnoccupiedStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetUnoccupiedStores(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_AddBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).AddBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_AddBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).AddBranch(ctx, req.(*AddBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_GetBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetBranch(ctx, req.(*GetBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetBusinessBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetBusinessBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_GetBusinessBranches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetBusinessBranches(ctx, req.(*GetBusinessBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_UpdateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).UpdateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_UpdateBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).UpdateBranch(ctx, req.(*UpdateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_SuspendBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).SuspendBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_SuspendBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).SuspendBranch(ctx, req.(*SuspendBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_ActivateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).ActivateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_ActivateBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).ActivateBranch(ctx, req.(*ActivateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_DeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).DeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_DeleteBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).DeleteBranch(ctx, req.(*DeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_AddBranchRent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBranchRentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).AddBranchRent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_AddBranchRent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).AddBranchRent(ctx, req.(*AddBranchRentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetBranchRents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchRentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetBranchRents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_GetBranchRents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetBranchRents(ctx, req.(*GetBranchRentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_UpdateBranchRent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchRentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).UpdateBranchRent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_UpdateBranchRent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).UpdateBranchRent(ctx, req.(*UpdateBranchRentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetUnpaidBranchRents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnpaidBranchRentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetUnpaidBranchRents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_GetUnpaidBranchRents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetUnpaidBranchRents(ctx, req.(*GetUnpaidBranchRentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetBusinessUnpaidBranchRents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnpaidBranchRentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetBusinessUnpaidBranchRents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_GetBusinessUnpaidBranchRents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetBusinessUnpaidBranchRents(ctx, req.(*GetBusinessUnpaidBranchRentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_AddProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).AddProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_AddProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).AddProductCategory(ctx, req.(*AddProductCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_GetProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetProductCategory(ctx, req.(*GetProductCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_UpdateProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).UpdateProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_UpdateProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).UpdateProductCategory(ctx, req.(*UpdateProductCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_SearchProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).SearchProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_SearchProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).SearchProducts(ctx, req.(*SearchProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_SuspendProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).SuspendProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_SuspendProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).SuspendProduct(ctx, req.(*SuspendProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_ActivateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).ActivateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_ActivateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).ActivateProduct(ctx, req.(*ActivateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_AddBusinessProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).AddBusinessProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_AddBusinessProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).AddBusinessProduct(ctx, req.(*AddBusinessProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetBusinessProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetBusinessProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_GetBusinessProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetBusinessProduct(ctx, req.(*GetBusinessProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_UpdateBusinessProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).UpdateBusinessProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_UpdateBusinessProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).UpdateBusinessProduct(ctx, req.(*UpdateBusinessProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_SearchBusinessProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBusinessProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).SearchBusinessProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_SearchBusinessProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).SearchBusinessProducts(ctx, req.(*SearchBusinessProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_SuspendBusinessProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendBusinessProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).SuspendBusinessProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_SuspendBusinessProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).SuspendBusinessProduct(ctx, req.(*SuspendBusinessProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_ActivateBusinessProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateBusinessProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).ActivateBusinessProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_ActivateBusinessProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).ActivateBusinessProduct(ctx, req.(*ActivateBusinessProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_AddBranchProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBranchProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).AddBranchProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_AddBranchProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).AddBranchProduct(ctx, req.(*AddBranchProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetBranchProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetBranchProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_GetBranchProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetBranchProduct(ctx, req.(*GetBranchProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_SearchBranchProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBranchProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).SearchBranchProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_SearchBranchProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).SearchBranchProducts(ctx, req.(*SearchBranchProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_UpdateBranchProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).UpdateBranchProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shop_UpdateBranchProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).UpdateBranchProduct(ctx, req.(*UpdateBranchProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shop_ServiceDesc is the grpc.ServiceDesc for Shop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pixel_plaza.Shop",
	HandlerType: (*ShopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBusiness",
			Handler:    _Shop_AddBusiness_Handler,
		},
		{
			MethodName: "GetBusiness",
			Handler:    _Shop_GetBusiness_Handler,
		},
		{
			MethodName: "UpdateBusiness",
			Handler:    _Shop_UpdateBusiness_Handler,
		},
		{
			MethodName: "SetBusinessProfilePicture",
			Handler:    _Shop_SetBusinessProfilePicture_Handler,
		},
		{
			MethodName: "SuspendBusiness",
			Handler:    _Shop_SuspendBusiness_Handler,
		},
		{
			MethodName: "ActivateBusiness",
			Handler:    _Shop_ActivateBusiness_Handler,
		},
		{
			MethodName: "DeleteBusiness",
			Handler:    _Shop_DeleteBusiness_Handler,
		},
		{
			MethodName: "AddBusinessOwner",
			Handler:    _Shop_AddBusinessOwner_Handler,
		},
		{
			MethodName: "RemoveBusinessOwner",
			Handler:    _Shop_RemoveBusinessOwner_Handler,
		},
		{
			MethodName: "GetBusinessOwners",
			Handler:    _Shop_GetBusinessOwners_Handler,
		},
		{
			MethodName: "AddBusinessClient",
			Handler:    _Shop_AddBusinessClient_Handler,
		},
		{
			MethodName: "IsBusinessClient",
			Handler:    _Shop_IsBusinessClient_Handler,
		},
		{
			MethodName: "AddMarketCategory",
			Handler:    _Shop_AddMarketCategory_Handler,
		},
		{
			MethodName: "GetMarketCategory",
			Handler:    _Shop_GetMarketCategory_Handler,
		},
		{
			MethodName: "UpdateMarketCategory",
			Handler:    _Shop_UpdateMarketCategory_Handler,
		},
		{
			MethodName: "AddBusinessMarketCategory",
			Handler:    _Shop_AddBusinessMarketCategory_Handler,
		},
		{
			MethodName: "GetBusinessMarketCategories",
			Handler:    _Shop_GetBusinessMarketCategories_Handler,
		},
		{
			MethodName: "AddStore",
			Handler:    _Shop_AddStore_Handler,
		},
		{
			MethodName: "GetStore",
			Handler:    _Shop_GetStore_Handler,
		},
		{
			MethodName: "DeleteStore",
			Handler:    _Shop_DeleteStore_Handler,
		},
		{
			MethodName: "GetUnoccupiedStores",
			Handler:    _Shop_GetUnoccupiedStores_Handler,
		},
		{
			MethodName: "AddBranch",
			Handler:    _Shop_AddBranch_Handler,
		},
		{
			MethodName: "GetBranch",
			Handler:    _Shop_GetBranch_Handler,
		},
		{
			MethodName: "GetBusinessBranches",
			Handler:    _Shop_GetBusinessBranches_Handler,
		},
		{
			MethodName: "UpdateBranch",
			Handler:    _Shop_UpdateBranch_Handler,
		},
		{
			MethodName: "SuspendBranch",
			Handler:    _Shop_SuspendBranch_Handler,
		},
		{
			MethodName: "ActivateBranch",
			Handler:    _Shop_ActivateBranch_Handler,
		},
		{
			MethodName: "DeleteBranch",
			Handler:    _Shop_DeleteBranch_Handler,
		},
		{
			MethodName: "AddBranchRent",
			Handler:    _Shop_AddBranchRent_Handler,
		},
		{
			MethodName: "GetBranchRents",
			Handler:    _Shop_GetBranchRents_Handler,
		},
		{
			MethodName: "UpdateBranchRent",
			Handler:    _Shop_UpdateBranchRent_Handler,
		},
		{
			MethodName: "GetUnpaidBranchRents",
			Handler:    _Shop_GetUnpaidBranchRents_Handler,
		},
		{
			MethodName: "GetBusinessUnpaidBranchRents",
			Handler:    _Shop_GetBusinessUnpaidBranchRents_Handler,
		},
		{
			MethodName: "AddProductCategory",
			Handler:    _Shop_AddProductCategory_Handler,
		},
		{
			MethodName: "GetProductCategory",
			Handler:    _Shop_GetProductCategory_Handler,
		},
		{
			MethodName: "UpdateProductCategory",
			Handler:    _Shop_UpdateProductCategory_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _Shop_AddProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _Shop_GetProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Shop_UpdateProduct_Handler,
		},
		{
			MethodName: "SearchProducts",
			Handler:    _Shop_SearchProducts_Handler,
		},
		{
			MethodName: "SuspendProduct",
			Handler:    _Shop_SuspendProduct_Handler,
		},
		{
			MethodName: "ActivateProduct",
			Handler:    _Shop_ActivateProduct_Handler,
		},
		{
			MethodName: "AddBusinessProduct",
			Handler:    _Shop_AddBusinessProduct_Handler,
		},
		{
			MethodName: "GetBusinessProduct",
			Handler:    _Shop_GetBusinessProduct_Handler,
		},
		{
			MethodName: "UpdateBusinessProduct",
			Handler:    _Shop_UpdateBusinessProduct_Handler,
		},
		{
			MethodName: "SearchBusinessProducts",
			Handler:    _Shop_SearchBusinessProducts_Handler,
		},
		{
			MethodName: "SuspendBusinessProduct",
			Handler:    _Shop_SuspendBusinessProduct_Handler,
		},
		{
			MethodName: "ActivateBusinessProduct",
			Handler:    _Shop_ActivateBusinessProduct_Handler,
		},
		{
			MethodName: "AddBranchProduct",
			Handler:    _Shop_AddBranchProduct_Handler,
		},
		{
			MethodName: "GetBranchProduct",
			Handler:    _Shop_GetBranchProduct_Handler,
		},
		{
			MethodName: "SearchBranchProducts",
			Handler:    _Shop_SearchBranchProducts_Handler,
		},
		{
			MethodName: "UpdateBranchProduct",
			Handler:    _Shop_UpdateBranchProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pixel_plaza/shop.proto",
}
