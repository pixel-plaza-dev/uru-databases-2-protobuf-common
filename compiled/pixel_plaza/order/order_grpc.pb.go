// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/pixel_plaza/order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Order_AddProductToCart_FullMethodName      = "/pixel_plaza.Order/AddProductToCart"
	Order_RemoveProductFromCart_FullMethodName = "/pixel_plaza.Order/RemoveProductFromCart"
	Order_GetCart_FullMethodName               = "/pixel_plaza.Order/GetCart"
	Order_GetCurrentCart_FullMethodName        = "/pixel_plaza.Order/GetCurrentCart"
	Order_GetCurrentCartId_FullMethodName      = "/pixel_plaza.Order/GetCurrentCartId"
	Order_GetCarts_FullMethodName              = "/pixel_plaza.Order/GetCarts"
	Order_GetCartTotal_FullMethodName          = "/pixel_plaza.Order/GetCartTotal"
	Order_ProceedToCheckout_FullMethodName     = "/pixel_plaza.Order/ProceedToCheckout"
	Order_GetOrders_FullMethodName             = "/pixel_plaza.Order/GetOrders"
	Order_GetOrder_FullMethodName              = "/pixel_plaza.Order/GetOrder"
)

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderClient interface {
	AddProductToCart(ctx context.Context, in *AddProductToCartRequest, opts ...grpc.CallOption) (*AddProductToCartResponse, error)
	RemoveProductFromCart(ctx context.Context, in *RemoveProductFromCartRequest, opts ...grpc.CallOption) (*RemoveProductFromCartResponse, error)
	GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartResponse, error)
	GetCurrentCart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCurrentCartResponse, error)
	GetCurrentCartId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCartResponse, error)
	GetCarts(ctx context.Context, in *GetCartsRequest, opts ...grpc.CallOption) (*GetCartsResponse, error)
	GetCartTotal(ctx context.Context, in *GetCartTotalRequest, opts ...grpc.CallOption) (*GetCartTotalResponse, error)
	ProceedToCheckout(ctx context.Context, in *ProceedToCheckoutRequest, opts ...grpc.CallOption) (*ProceedToCheckoutResponse, error)
	GetOrders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
}

type orderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderClient(cc grpc.ClientConnInterface) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) AddProductToCart(ctx context.Context, in *AddProductToCartRequest, opts ...grpc.CallOption) (*AddProductToCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductToCartResponse)
	err := c.cc.Invoke(ctx, Order_AddProductToCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) RemoveProductFromCart(ctx context.Context, in *RemoveProductFromCartRequest, opts ...grpc.CallOption) (*RemoveProductFromCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveProductFromCartResponse)
	err := c.cc.Invoke(ctx, Order_RemoveProductFromCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCartResponse)
	err := c.cc.Invoke(ctx, Order_GetCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetCurrentCart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCurrentCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentCartResponse)
	err := c.cc.Invoke(ctx, Order_GetCurrentCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetCurrentCartId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCartResponse)
	err := c.cc.Invoke(ctx, Order_GetCurrentCartId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetCarts(ctx context.Context, in *GetCartsRequest, opts ...grpc.CallOption) (*GetCartsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCartsResponse)
	err := c.cc.Invoke(ctx, Order_GetCarts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetCartTotal(ctx context.Context, in *GetCartTotalRequest, opts ...grpc.CallOption) (*GetCartTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCartTotalResponse)
	err := c.cc.Invoke(ctx, Order_GetCartTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) ProceedToCheckout(ctx context.Context, in *ProceedToCheckoutRequest, opts ...grpc.CallOption) (*ProceedToCheckoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProceedToCheckoutResponse)
	err := c.cc.Invoke(ctx, Order_ProceedToCheckout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetOrders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, Order_GetOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, Order_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
// All implementations must embed UnimplementedOrderServer
// for forward compatibility.
type OrderServer interface {
	AddProductToCart(context.Context, *AddProductToCartRequest) (*AddProductToCartResponse, error)
	RemoveProductFromCart(context.Context, *RemoveProductFromCartRequest) (*RemoveProductFromCartResponse, error)
	GetCart(context.Context, *GetCartRequest) (*GetCartResponse, error)
	GetCurrentCart(context.Context, *emptypb.Empty) (*GetCurrentCartResponse, error)
	GetCurrentCartId(context.Context, *emptypb.Empty) (*GetCartResponse, error)
	GetCarts(context.Context, *GetCartsRequest) (*GetCartsResponse, error)
	GetCartTotal(context.Context, *GetCartTotalRequest) (*GetCartTotalResponse, error)
	ProceedToCheckout(context.Context, *ProceedToCheckoutRequest) (*ProceedToCheckoutResponse, error)
	GetOrders(context.Context, *emptypb.Empty) (*GetOrdersResponse, error)
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	mustEmbedUnimplementedOrderServer()
}

// UnimplementedOrderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServer struct{}

func (UnimplementedOrderServer) AddProductToCart(context.Context, *AddProductToCartRequest) (*AddProductToCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductToCart not implemented")
}
func (UnimplementedOrderServer) RemoveProductFromCart(context.Context, *RemoveProductFromCartRequest) (*RemoveProductFromCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProductFromCart not implemented")
}
func (UnimplementedOrderServer) GetCart(context.Context, *GetCartRequest) (*GetCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedOrderServer) GetCurrentCart(context.Context, *emptypb.Empty) (*GetCurrentCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentCart not implemented")
}
func (UnimplementedOrderServer) GetCurrentCartId(context.Context, *emptypb.Empty) (*GetCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentCartId not implemented")
}
func (UnimplementedOrderServer) GetCarts(context.Context, *GetCartsRequest) (*GetCartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarts not implemented")
}
func (UnimplementedOrderServer) GetCartTotal(context.Context, *GetCartTotalRequest) (*GetCartTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartTotal not implemented")
}
func (UnimplementedOrderServer) ProceedToCheckout(context.Context, *ProceedToCheckoutRequest) (*ProceedToCheckoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProceedToCheckout not implemented")
}
func (UnimplementedOrderServer) GetOrders(context.Context, *emptypb.Empty) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedOrderServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrderServer) mustEmbedUnimplementedOrderServer() {}
func (UnimplementedOrderServer) testEmbeddedByValue()               {}

// UnsafeOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServer will
// result in compilation errors.
type UnsafeOrderServer interface {
	mustEmbedUnimplementedOrderServer()
}

func RegisterOrderServer(s grpc.ServiceRegistrar, srv OrderServer) {
	// If the following call pancis, it indicates UnimplementedOrderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Order_ServiceDesc, srv)
}

func _Order_AddProductToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductToCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).AddProductToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_AddProductToCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).AddProductToCart(ctx, req.(*AddProductToCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_RemoveProductFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProductFromCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).RemoveProductFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_RemoveProductFromCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).RemoveProductFromCart(ctx, req.(*RemoveProductFromCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_GetCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetCart(ctx, req.(*GetCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetCurrentCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetCurrentCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_GetCurrentCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetCurrentCart(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetCurrentCartId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetCurrentCartId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_GetCurrentCartId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetCurrentCartId(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetCarts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetCarts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_GetCarts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetCarts(ctx, req.(*GetCartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetCartTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetCartTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_GetCartTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetCartTotal(ctx, req.(*GetCartTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_ProceedToCheckout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProceedToCheckoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).ProceedToCheckout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_ProceedToCheckout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).ProceedToCheckout(ctx, req.(*ProceedToCheckoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_GetOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetOrders(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Order_ServiceDesc is the grpc.ServiceDesc for Order service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Order_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pixel_plaza.Order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductToCart",
			Handler:    _Order_AddProductToCart_Handler,
		},
		{
			MethodName: "RemoveProductFromCart",
			Handler:    _Order_RemoveProductFromCart_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _Order_GetCart_Handler,
		},
		{
			MethodName: "GetCurrentCart",
			Handler:    _Order_GetCurrentCart_Handler,
		},
		{
			MethodName: "GetCurrentCartId",
			Handler:    _Order_GetCurrentCartId_Handler,
		},
		{
			MethodName: "GetCarts",
			Handler:    _Order_GetCarts_Handler,
		},
		{
			MethodName: "GetCartTotal",
			Handler:    _Order_GetCartTotal_Handler,
		},
		{
			MethodName: "ProceedToCheckout",
			Handler:    _Order_ProceedToCheckout_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _Order_GetOrders_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _Order_GetOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pixel_plaza/order.proto",
}
